<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="JMeter Test Flow Scenario (CMIS operations)" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Clean JMeter Variables" enabled="true">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script">import org.apache.jmeter.threads.JMeterVariables;
JMeterVariables clean = new JMeterVariables();
vars = clean;</stringProp>
      </BeanShellPostProcessor>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="THREADS_NUMBER" elementType="Argument">
            <stringProp name="Argument.name">THREADS_NUMBER</stringProp>
            <stringProp name="Argument.value">${__P(jmeterThreadsNumber, 20)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Number of threads (users)</stringProp>
          </elementProp>
          <elementProp name="LOOP_COUNT" elementType="Argument">
            <stringProp name="Argument.name">LOOP_COUNT</stringProp>
            <stringProp name="Argument.value">${__P(jmeterLoopCount, 100)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Loop Count Number</stringProp>
          </elementProp>
          <elementProp name="DURATION" elementType="Argument">
            <stringProp name="Argument.name">DURATION</stringProp>
            <stringProp name="Argument.value">${__P(jmeterDuration, 100)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Duration (seconds)</stringProp>
          </elementProp>
          <elementProp name="HOST" elementType="Argument">
            <stringProp name="Argument.name">HOST</stringProp>
            <stringProp name="Argument.value">${__P(jmeterEnvHost, content-performance.engagepoint.ua)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">IP or domain of test environment</stringProp>
          </elementProp>
          <elementProp name="POLLING_DELAY" elementType="Argument">
            <stringProp name="Argument.name">POLLING_DELAY</stringProp>
            <stringProp name="Argument.value">5000</stringProp>
            <stringProp name="Argument.desc">Polling delay between requests to check indexing time (ms)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FILENET_URL" elementType="Argument">
            <stringProp name="Argument.name">FILENET_URL</stringProp>
            <stringProp name="Argument.value">${__P(filenetUrl, http://192.168.35.21:9080/fncmis/wsdl)}</stringProp>
            <stringProp name="Argument.desc">FileNet URL</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FILENET_PROJ" elementType="Argument">
            <stringProp name="Argument.name">FILENET_PROJ</stringProp>
            <stringProp name="Argument.value">${__P(filenetProjection, AT)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Path of projection in FileNet</stringProp>
          </elementProp>
          <elementProp name="FILENET_USERNAME" elementType="Argument">
            <stringProp name="Argument.name">FILENET_USERNAME</stringProp>
            <stringProp name="Argument.value">${__P(filenetUsername, content-test)}</stringProp>
            <stringProp name="Argument.desc">FileNet user name</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FILENET_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">FILENET_PASSWORD</stringProp>
            <stringProp name="Argument.value">${__P(filenetPassword, content-test)}</stringProp>
            <stringProp name="Argument.desc">FileNet user password</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FTP_USERNAME" elementType="Argument">
            <stringProp name="Argument.name">FTP_USERNAME</stringProp>
            <stringProp name="Argument.value">content-test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">User crendentials to FTP/FTPs/SFTP</stringProp>
          </elementProp>
          <elementProp name="FTP_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">FTP_PASSWORD</stringProp>
            <stringProp name="Argument.value">content-test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">User credentials to FTP/FTPs/SFTP</stringProp>
          </elementProp>
          <elementProp name="FTP_URL" elementType="Argument">
            <stringProp name="Argument.name">FTP_URL</stringProp>
            <stringProp name="Argument.value">content-at2.engagepoint.ua</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">FTP url</stringProp>
          </elementProp>
          <elementProp name="FTPS_URL" elementType="Argument">
            <stringProp name="Argument.name">FTPS_URL</stringProp>
            <stringProp name="Argument.value">content-at1.engagepoint.ua</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">FTPs url</stringProp>
          </elementProp>
          <elementProp name="SFTP_URL" elementType="Argument">
            <stringProp name="Argument.name">SFTP_URL</stringProp>
            <stringProp name="Argument.value">content-dev.engagepoint.ua</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">SFTP url</stringProp>
          </elementProp>
          <elementProp name="EXCHANGE_USERNAME" elementType="Argument">
            <stringProp name="Argument.name">EXCHANGE_USERNAME</stringProp>
            <stringProp name="Argument.value">qatest821@outlook.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">User credentials to Microsoft Exchange</stringProp>
          </elementProp>
          <elementProp name="EXCHANGE_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">EXCHANGE_PASSWORD</stringProp>
            <stringProp name="Argument.value">qatest_821</stringProp>
            <stringProp name="Argument.desc">User credentials to Microsoft Exchange</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EXCHANGE_URL" elementType="Argument">
            <stringProp name="Argument.name">EXCHANGE_URL</stringProp>
            <stringProp name="Argument.value">mail-dev.engagepoint.ua</stringProp>
            <stringProp name="Argument.desc">User credentials to Microsoft Exchange</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SHAREPOINT_USERNAME" elementType="Argument">
            <stringProp name="Argument.name">SHAREPOINT_USERNAME</stringProp>
            <stringProp name="Argument.value">content-test</stringProp>
            <stringProp name="Argument.desc">User credentials to Microsoft SharePoint</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SHAREPOINT_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">SHAREPOINT_PASSWORD</stringProp>
            <stringProp name="Argument.value">content-test</stringProp>
            <stringProp name="Argument.desc">User credentials to Microsoft SharePoint</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SHAREPOINT_URL" elementType="Argument">
            <stringProp name="Argument.name">SHAREPOINT_URL</stringProp>
            <stringProp name="Argument.value">http://content-sharepoint-dev.engagepoint.ua/_vti_bin/cmissoapwsdl.aspx</stringProp>
            <stringProp name="Argument.desc">User credentials to Microsoft SharePoint</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GMAIL_USERNAME" elementType="Argument">
            <stringProp name="Argument.name">GMAIL_USERNAME</stringProp>
            <stringProp name="Argument.value">product.content.test@gmail.com</stringProp>
            <stringProp name="Argument.desc">User credentials to GMAIL</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="GMAIL_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">GMAIL_PASSWORD</stringProp>
            <stringProp name="Argument.value">1/KFpWrt0RJhXPMG2rKsNphwvv_TZ9djc9ghtx94wDbYE</stringProp>
            <stringProp name="Argument.desc">User credentials to GMAIL</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SMB_URL" elementType="Argument">
            <stringProp name="Argument.name">SMB_URL</stringProp>
            <stringProp name="Argument.value">192.168.35.134</stringProp>
            <stringProp name="Argument.desc">User credentials to Microsoft SharePoint</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CMIS_URL" elementType="Argument">
            <stringProp name="Argument.name">CMIS_URL</stringProp>
            <stringProp name="Argument.value">/content/services/ObjectService</stringProp>
            <stringProp name="Argument.desc">CMIS Object Service url</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NAME_LOCAL_STORE" elementType="Argument">
            <stringProp name="Argument.name">NAME_LOCAL_STORE</stringProp>
            <stringProp name="Argument.value">localStore</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Name of local storage</stringProp>
          </elementProp>
          <elementProp name="PATH_LOCAL_STORE" elementType="Argument">
            <stringProp name="Argument.name">PATH_LOCAL_STORE</stringProp>
            <stringProp name="Argument.value">/LocalStorage</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Path of local storage</stringProp>
          </elementProp>
          <elementProp name="CONTENT_REPO" elementType="Argument">
            <stringProp name="Argument.name">CONTENT_REPO</stringProp>
            <stringProp name="Argument.value">EngagePoint Content</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Repository name in Content</stringProp>
          </elementProp>
          <elementProp name="USER_NAME" elementType="Argument">
            <stringProp name="Argument.name">USER_NAME</stringProp>
            <stringProp name="Argument.value">username_${__RandomString(8,abcdefghijklmnopqrstuvwxyz1234567890)}${__RandomString(8,abcdefghijklmnopqrstuvwxyz1234567890)}@engagepoint.com</stringProp>
            <stringProp name="Argument.desc">User random name</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">USER_PASSWORD</stringProp>
            <stringProp name="Argument.value">password1</stringProp>
            <stringProp name="Argument.desc">User default password</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER_NAME_DEFAULT" elementType="Argument">
            <stringProp name="Argument.name">USER_NAME_DEFAULT</stringProp>
            <stringProp name="Argument.value">contentuserqa@gmail.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">User random name</stringProp>
          </elementProp>
          <elementProp name="USER_PASSWORD_DEFAULT" elementType="Argument">
            <stringProp name="Argument.name">USER_PASSWORD_DEFAULT</stringProp>
            <stringProp name="Argument.value">contentqa</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">User default password</stringProp>
          </elementProp>
          <elementProp name="testIndexingTimeLocalStore_on" elementType="Argument">
            <stringProp name="Argument.name">testIndexingTimeLocalStore_on</stringProp>
            <stringProp name="Argument.value">${__P(testIndexingTimeLocalStore_on, false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Flag to turn on test (OFF by default)</stringProp>
          </elementProp>
          <elementProp name="testIndexingTimeFilenet_on" elementType="Argument">
            <stringProp name="Argument.name">testIndexingTimeFilenet_on</stringProp>
            <stringProp name="Argument.value">${__P(testIndexingTimeFilenet_on, true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Flag to turn on test</stringProp>
          </elementProp>
          <elementProp name="testIndexingTimeFtp_on" elementType="Argument">
            <stringProp name="Argument.name">testIndexingTimeFtp_on</stringProp>
            <stringProp name="Argument.value">${__P(testIndexingTimeFtp_on, true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Flag to turn on test</stringProp>
          </elementProp>
          <elementProp name="testIndexingTimeFtps_on" elementType="Argument">
            <stringProp name="Argument.name">testIndexingTimeFtps_on</stringProp>
            <stringProp name="Argument.value">${__P(testIndexingTimeFtps_on, true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Flag to turn on test</stringProp>
          </elementProp>
          <elementProp name="testIndexingTimeSftp_on" elementType="Argument">
            <stringProp name="Argument.name">testIndexingTimeSftp_on</stringProp>
            <stringProp name="Argument.value">${__P(testIndexingTimeSftp_on, true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Flag to turn on test</stringProp>
          </elementProp>
          <elementProp name="testIndexingTimeExchangeInbox_on" elementType="Argument">
            <stringProp name="Argument.name">testIndexingTimeExchangeInbox_on</stringProp>
            <stringProp name="Argument.value">${__P(testIndexingTimeExchangeInbox_on, true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Flag to turn on test</stringProp>
          </elementProp>
          <elementProp name="testIndexingTimeSharePoint_on" elementType="Argument">
            <stringProp name="Argument.name">testIndexingTimeSharePoint_on</stringProp>
            <stringProp name="Argument.value">${__P(testIndexingTimeSharePoint_on, true)}</stringProp>
            <stringProp name="Argument.desc">Flag to turn on test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="testIndexingTimeGmailInbox_on" elementType="Argument">
            <stringProp name="Argument.name">testIndexingTimeGmailInbox_on</stringProp>
            <stringProp name="Argument.value">${__P(testIndexingTimeGmailInbox_on, true)}</stringProp>
            <stringProp name="Argument.desc">Flag to turn on test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="testIndexingTimeSmb_on" elementType="Argument">
            <stringProp name="Argument.name">testIndexingTimeSmb_on</stringProp>
            <stringProp name="Argument.value">${__P(testIndexingTimeSmb_on, true)}</stringProp>
            <stringProp name="Argument.desc">Flag to turn on test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Generate Random values" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1497278661000</longProp>
        <longProp name="ThreadGroup.end_time">1497278661000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Generate Random values" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random value rndBoundary" enabled="true">
            <stringProp name="maximumValue">-1</stringProp>
            <stringProp name="minimumValue">0</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <boolProp name="perThread">true</boolProp>
            <stringProp name="randomSeed">${__RandomString(32,abcdefghijklmnopqrstuvwxyz1234567890,rndBoundary)}</stringProp>
            <stringProp name="variableName">rndBoundary</stringProp>
            <stringProp name="TestPlan.comments">Generate random Boundary value to send SOAP request</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random value rndFileName (file/dir)" enabled="true">
            <stringProp name="variableName">rndFileName</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <stringProp name="minimumValue">0</stringProp>
            <stringProp name="maximumValue">-1</stringProp>
            <stringProp name="randomSeed">${__RandomString(16,abcdefghijklmnopqrstuvwxyz1234567890,rndFileName)}</stringProp>
            <boolProp name="perThread">true</boolProp>
            <stringProp name="TestPlan.comments">Generate random Name value to create document/folder in storage</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random value rndContentStream" enabled="true">
            <stringProp name="variableName">rndContentStream</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <stringProp name="minimumValue">0</stringProp>
            <stringProp name="maximumValue">-1</stringProp>
            <stringProp name="randomSeed">${__RandomString(131072,ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890+/- ,rndContentStream)}</stringProp>
            <boolProp name="perThread">true</boolProp>
            <stringProp name="TestPlan.comments">Generate random Content Stream value to create documents in storage</stringProp>
          </RandomVariableConfig>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save values to Variables" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">${__setProperty(rndBoundary,${rndBoundary})};
${__setProperty(rndFileName,${rndFileName})};
${__setProperty(rndContentStream,${rndContentStream})};</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Preconditions_Set_up_Content" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1496414965000</longProp>
        <longProp name="ThreadGroup.end_time">1496414965000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register New User" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;email&quot;: &quot;${USER_NAME}&quot;,    &#xd;
&quot;firstName&quot;: &quot;William&quot;,&#xd;
&quot;lastName&quot;: &quot;Mackenzie&quot;,&#xd;
&quot;password&quot;: &quot;${USER_PASSWORD}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/content/rest/user-account</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login User" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">${USER_NAME}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">password</stringProp>
                <stringProp name="Argument.value">${USER_PASSWORD}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/content/rest/authorize/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Parsing of &quot;Set-Cookie&quot; from HTTP response" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">setCookie</stringProp>
            <stringProp name="RegexExtractor.regex">Set-Cookie: (.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">null</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save Base Folder Id to Variables" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">${__setProperty(setCookie,${setCookie})};</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Preconditions_Set_up_Local_Storage" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1400496822000</longProp>
        <longProp name="ThreadGroup.end_time">1400496822000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${testIndexingTimeLocalStore_on}&quot; == &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Generate Random values Module Controller " enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1950697682">JMeter Test Flow Scenario (CMIS operations)</stringProp>
              <stringProp name="-1721842764">Generate Random values</stringProp>
              <stringProp name="-1721842764">Generate Random values</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create Local Store" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Local Store" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;name&quot;:&quot;${NAME_LOCAL_STORE}&quot;,&#xd;
&quot;internalPath&quot;:&quot;${PATH_LOCAL_STORE}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/content/rest/user-connector/create-local-store</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Cookie" elementType="Header">
                    <stringProp name="Header.name">Cookie</stringProp>
                    <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Install document types in Local Store" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">//------------------------------------------------------------------------------&#xd;
// N A M E S P A C E S&#xd;
//------------------------------------------------------------------------------&#xd;
&lt;jcr=&apos;http://www.jcp.org/jcr/1.0&apos;&gt;&#xd;
&lt;nt=&apos;http://www.jcp.org/jcr/nt/1.0&apos;&gt;&#xd;
&lt;notifications=&apos;http://engagepoint.com/document/notifications&apos;&gt;&#xd;
&lt;mix=&apos;http://www.jcp.org/jcr/mix/1.0&apos;&gt;&#xd;
//------------------------------------------------------------------------------&#xd;
// N O D E T Y P E S&#xd;
//------------------------------------------------------------------------------&#xd;
&#xd;
[notifications:hixDocument] &gt; nt:file abstract&#xd;
- notifications:hixDocumentId (string)&#xd;
&#xd;
[notifications:appeals] &gt; nt:file, mix:versionable&#xd;
- notifications:documentDate (date)&#xd;
- notifications:appealsDocumentType (string) &lt; &quot;MNsure Appeals Decision Unredacted&quot;, &quot;MNsure Appeals Request Form&quot;&#xd;
- notifications:appealsProgram (string) &lt; &quot;Advance Premium Tax Credits (APTC)&quot;, &quot;Medical Assistance (MA)/Children&apos;s Health Insurance Program (CHIP)&quot;, &quot;MinnesotaCare&quot;&#xd;
- notifications:repFirstName (string)&#xd;
- notifications:repLastName (string)&#xd;
- notifications:dateOfBirth (date)&#xd;
- notifications:filingDate (date)&#xd;
- notifications:decisionDate (date)&#xd;
- notifications:appellantFirstName (string)&#xd;
- notifications:appellantLastName (string)&#xd;
- notifications:appellantMiddleName (string)&#xd;
- notifications:mnsureID (string)&#xd;
- notifications:userName (string)&#xd;
- notifications:docketNumber (string)&#xd;
- notifications:examinerFirstName (string)&#xd;
- notifications:examinerLastName (string)&#xd;
- notifications:tags (string) multiple&#xd;
- notifications:fileName (string)&#xd;
- notifications:templateId (string)&#xd;
&#xd;
[notifications:templateGroup] &gt; nt:folder&#xd;
- notifications:tags (string) multiple&#xd;
- notifications:description (string)&#xd;
- notifications:locked (boolean)&#xd;
&#xd;
[notifications:customNotification] &gt; notifications:hixDocument abstract&#xd;
- notifications:dateOfBirth (date)&#xd;
&#xd;
[notifications:baseNotification] &gt; notifications:customNotification abstract&#xd;
- notifications:tags (string) multiple&#xd;
- notifications:templateId (string)&#xd;
&#xd;
[notifications:emailNotification] &gt; notifications:baseNotification&#xd;
- notifications:subject (string)&#xd;
- notifications:from (string)&#xd;
- notifications:to (string) multiple&#xd;
- notifications:cc (string) multiple&#xd;
- notifications:bcc (string) multiple&#xd;
- notifications:attachments (string) multiple&#xd;
&#xd;
[notifications:printMailNotification] &gt; notifications:baseNotification&#xd;
- notifications:name (string)&#xd;
- notifications:company (string)&#xd;
- notifications:streetAddress (string)&#xd;
- notifications:city (string)&#xd;
- notifications:state (string)&#xd;
- notifications:zipCode (string)&#xd;
- notifications:crossReferenceNumber (string)&#xd;
&#xd;
[notifications:hixEmailNotification] &gt; notifications:emailNotification&#xd;
- notifications:contractId (string)&#xd;
- notifications:choiceOption (string) &lt; &quot;optionOne&quot;, &quot;optionTwo&quot;, &quot;aaa\u0028aaa&quot;&#xd;
- notifications:requiredField (string) mandatory&#xd;
&#xd;
[notifications:smsNotification] &gt; notifications:baseNotification&#xd;
- notifications:from (string)&#xd;
- notifications:to (string) multiple&#xd;
- notifications:deliveryReceiptDate (date)&#xd;
- notifications:deliveryReceiptStatus (string)&#xd;
&#xd;
[notifications:notificationAttachment] &gt; notifications:baseNotification&#xd;
- notifications:fileName (string)&#xd;
&#xd;
[notifications:baseTemplate] &gt; notifications:hixDocument abstract&#xd;
- notifications:locale (string)&#xd;
- notifications:outputMimeType (string)&#xd;
- notifications:renderingEngine (string)&#xd;
- notifications:targetDocumentTypeId (string)&#xd;
- notifications:placeholderKeys (string) multiple&#xd;
- notifications:placeholderValues (string) multiple&#xd;
- notifications:templateVersion (string) = &quot;1.0&quot;&#xd;
- notifications:startDate (date)&#xd;
- notifications:endDate (date)&#xd;
- notifications:status (string)&#xd;
&#xd;
[notifications:emailTemplate] &gt; notifications:baseTemplate&#xd;
- notifications:subject (string)&#xd;
- notifications:staticAttachments (string) multiple&#xd;
- notifications:dynamicAttachments (string) multiple&#xd;
&#xd;
[notifications:printMailTemplate] &gt; notifications:baseTemplate&#xd;
- notifications:staticAttachments (string) multiple&#xd;
- notifications:dynamicAttachments (string) multiple&#xd;
- notifications:readOnly (boolean)&#xd;
&#xd;
[notifications:smsTemplate] &gt; notifications:baseTemplate&#xd;
&#xd;
[notifications:attachmentTemplate] &gt; notifications:baseTemplate&#xd;
- notifications:targetFileName (string)&#xd;
- notifications:readOnly (boolean)&#xd;
&#xd;
[notifications:appealsNotification1] &gt; notifications:appeals&#xd;
- notifications:tags (string) multiple&#xd;
- notifications:templateId (string)&#xd;
- notifications:fileName (string)&#xd;
&#xd;
[notifications:appealsNotification4] &gt; notifications:appeals</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/content/rest/user-connector/install-local-store-types</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">text/plain</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Cookie</stringProp>
                    <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Root Folder Id By Path in Local Store" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">--${rndBoundary}&#xd;
Content-Type: application/xop+xml; charset=UTF-8; type=&quot;text/xml&quot;&#xd;
Content-Transfer-Encoding: 8bit&#xd;
Content-ID: &lt;rootpart@soapui.org&gt;&#xd;
&#xd;
&lt;soapenv:Envelope xmlns:ns=&quot;http://docs.oasis-open.org/ns/cmis/messaging/200908/&quot; xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&#xd;
   &lt;soapenv:Header&gt;&lt;wsse:Security xmlns:wsse=&quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd&quot; xmlns:wsu=&quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd&quot;&gt;&lt;wsse:UsernameToken wsu:Id=&quot;UsernameToken-C19C697791B6376B97149641571825124&quot;&gt;&lt;wsse:Username&gt;${USER_NAME}&lt;/wsse:Username&gt;&lt;wsse:Password Type=&quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText&quot;&gt;${USER_PASSWORD}&lt;/wsse:Password&gt;&lt;wsse:Nonce EncodingType=&quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary&quot;&gt;kogS6U+SnxAgxTSdD7TlWw==&lt;/wsse:Nonce&gt;&lt;wsu:Created&gt;2017-06-02T15:01:58.251Z&lt;/wsu:Created&gt;&lt;/wsse:UsernameToken&gt;&lt;/wsse:Security&gt;&lt;/soapenv:Header&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ns:getObjectByPath&gt;&#xd;
         &lt;ns:repositoryId&gt;${CONTENT_REPO}&lt;/ns:repositoryId&gt;&#xd;
         &lt;ns:path&gt;${PATH_LOCAL_STORE}&lt;/ns:path&gt;&#xd;
      &lt;/ns:getObjectByPath&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;&#xd;
--${rndBoundary}--</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${CMIS_URL}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">multipart/related; type=&quot;application/xop+xml&quot;; start=&quot;&lt;rootpart@soapui.org&gt;&quot;; start-info=&quot;text/xml&quot;; boundary=&quot;${rndBoundary}&quot;</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">MIME-Version</stringProp>
                    <stringProp name="Header.value">1.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Convert Request to the correct XML format" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">String response  = prev.getResponseDataAsString();
int begin = response.indexOf(&quot;&lt;soap:Envelope&quot;);
int end = response.lastIndexOf(&quot;--uuid:&quot;);
String xml = response.substring(begin, end);
prev.setResponseData(xml, &quot;UTF-8&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Parsing of &quot;Root Folder Id Local Store&quot; from XML" enabled="true">
                <stringProp name="XPathExtractor.default">null</stringProp>
                <stringProp name="XPathExtractor.refname">rootFolderIdLocalStore</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[@queryName=&apos;cmis:objectId&apos;]/*[local-name()=&apos;value&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <stringProp name="Scope.variable"></stringProp>
                <stringProp name="XPathExtractor.matchNumber">1</stringProp>
                <boolProp name="XPathExtractor.quiet">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save Root Folder Id Local Store to Variables" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">${__setProperty(ROOT_FOLDER_ID_LOCAL_STORE,${rootFolderIdLocalStore})};</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Base Folder in root (Local Store)" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">--${rndBoundary}&#xd;
Content-Type: application/xop+xml; charset=UTF-8; type=&quot;text/xml&quot;&#xd;
Content-Transfer-Encoding: 8bit&#xd;
Content-ID: &lt;rootpart@soapui.org&gt;&#xd;
&#xd;
&lt;soapenv:Envelope xmlns:ns=&quot;http://docs.oasis-open.org/ns/cmis/messaging/200908/&quot; xmlns:ns1=&quot;http://docs.oasis-open.org/ns/cmis/core/200908/&quot; xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&#xd;
   &lt;soapenv:Header&gt;&lt;wsse:Security xmlns:wsse=&quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd&quot; xmlns:wsu=&quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd&quot;&gt;&lt;wsse:UsernameToken wsu:Id=&quot;UsernameToken-C19C697791B6376B97149633252918617&quot;&gt;&lt;wsse:Username&gt;${USER_NAME}&lt;/wsse:Username&gt;&lt;wsse:Password Type=&quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText&quot;&gt;${USER_PASSWORD}&lt;/wsse:Password&gt;&lt;wsse:Nonce EncodingType=&quot;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary&quot;&gt;KiHXNLm/Cw0AhOOeHgQaVg==&lt;/wsse:Nonce&gt;&lt;wsu:Created&gt;2017-06-01T15:55:29.186Z&lt;/wsu:Created&gt;&lt;/wsse:UsernameToken&gt;&lt;/wsse:Security&gt;&lt;/soapenv:Header&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ns:createFolder&gt;&#xd;
         &lt;ns:repositoryId&gt;${CONTENT_REPO}&lt;/ns:repositoryId&gt;&#xd;
         &lt;ns:properties&gt;&#xd;
            &lt;ns1:propertyId displayName=&quot;?&quot; localName=&quot;?&quot; propertyDefinitionId=&quot;cmis:objectTypeId&quot; queryName=&quot;?&quot;&gt;&#xd;
               &lt;ns1:value&gt;cmis:folder&lt;/ns1:value&gt;&#xd;
            &lt;/ns1:propertyId&gt;            &#xd;
            &lt;ns1:propertyString displayName=&quot;?&quot; localName=&quot;?&quot; propertyDefinitionId=&quot;cmis:name&quot; queryName=&quot;?&quot;&gt;&#xd;
               &lt;ns1:value&gt;folder_${rndFileName}&lt;/ns1:value&gt;&#xd;
            &lt;/ns1:propertyString&gt;&#xd;
         &lt;/ns:properties&gt;&#xd;
         &lt;ns:folderId&gt;${__property(ROOT_FOLDER_ID_LOCAL_STORE)}&lt;/ns:folderId&gt;&#xd;
         &lt;ns:extension&gt;&#xd;
         &lt;/ns:extension&gt;&#xd;
      &lt;/ns:createFolder&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;&#xd;
--${rndBoundary}--</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${CMIS_URL}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">multipart/related; type=&quot;application/xop+xml&quot;; start=&quot;&lt;rootpart@soapui.org&gt;&quot;; start-info=&quot;text/xml&quot;; boundary=&quot;${rndBoundary}&quot;</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">MIME-Version</stringProp>
                    <stringProp name="Header.value">1.0</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Convert Request to the correct XML format" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">String response  = prev.getResponseDataAsString();
int begin = response.indexOf(&quot;&lt;soap:Envelope&quot;);
int end = response.lastIndexOf(&quot;--uuid:&quot;);
String xml = response.substring(begin, end);
prev.setResponseData(xml, &quot;UTF-8&quot;);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Parsing of &quot;Base Folder Id&quot; from XML" enabled="true">
                <stringProp name="XPathExtractor.default">null</stringProp>
                <stringProp name="XPathExtractor.refname">baseFolderIdLocalStore</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//*[name()=&apos;objectId&apos;]/text()</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
                <stringProp name="Scope.variable"></stringProp>
                <stringProp name="XPathExtractor.matchNumber">1</stringProp>
                <boolProp name="XPathExtractor.quiet">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save Base Folder Id to Variables" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">${__setProperty(BASE_FOLDER_ID_LOCALSTORE,${baseFolderIdLocalStore})};</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
              <boolProp name="displayJMeterProperties">true</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Greate_Data_in_Local_Storage" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${THREADS_NUMBER}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1400496822000</longProp>
        <longProp name="ThreadGroup.end_time">1400496822000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${testIndexingTimeLocalStore_on}&quot; == &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Generate Random values Module Controller " enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1950697682">JMeter Test Flow Scenario (CMIS operations)</stringProp>
              <stringProp name="-1721842764">Generate Random values</stringProp>
              <stringProp name="-1721842764">Generate Random values</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Greate Data in Local Storage" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${LOOP_COUNT}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">${LOOP_COUNT}</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">counter</stringProp>
              <stringProp name="CounterConfig.format">000</stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateFiledDocumentLocalStoreAmount" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">--${rndBoundary}&#xd;
Content-Type: application/xop+xml; charset=UTF-8; type=&quot;text/xml&quot;&#xd;
Content-Transfer-Encoding: 8bit&#xd;
Content-ID: &lt;rootpart@soapui.org&gt;&#xd;
&#xd;
&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ns=&quot;http://docs.oasis-open.org/ns/cmis/messaging/200908/&quot; xmlns:ns1=&quot;http://docs.oasis-open.org/ns/cmis/core/200908/&quot;&gt;&#xd;
&lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ns:createDocument&gt;&#xd;
         &lt;ns:repositoryId&gt;${CONTENT_REPO}&lt;/ns:repositoryId&gt;&#xd;
         &lt;ns:properties&gt;&#xd;
            &lt;ns1:propertyId displayName=&quot;?&quot; localName=&quot;?&quot; propertyDefinitionId=&quot;cmis:objectTypeId&quot; queryName=&quot;?&quot;&gt;&#xd;
               &lt;ns1:value&gt;cmis:document&lt;/ns1:value&gt;&#xd;
            &lt;/ns1:propertyId&gt;           &#xd;
            &lt;ns1:propertyString displayName=&quot;?&quot; localName=&quot;?&quot; propertyDefinitionId=&quot;cmis:name&quot; queryName=&quot;?&quot;&gt;&#xd;
               &lt;ns1:value&gt;file_${rndFileName}_${counter}.doc&lt;/ns1:value&gt;&#xd;
            &lt;/ns1:propertyString&gt;&#xd;
         &lt;/ns:properties&gt;&#xd;
         &lt;ns:folderId&gt;${__property(BASE_FOLDER_ID_LOCALSTORE)}&lt;/ns:folderId&gt;  &#xd;
         &lt;ns:contentStream&gt;&#xd;
            &lt;ns:length&gt;1000&lt;/ns:length&gt;&#xd;
            &lt;ns:mimeType&gt;application/octeat-stream&lt;/ns:mimeType&gt;&#xd;
            &lt;ns:filename&gt;file_${rndFileName}_${counter}.doc&lt;/ns:filename&gt;&#xd;
            &lt;ns:stream&gt;${rndContentStream}${counter}&lt;/ns:stream&gt;&#xd;
         &lt;/ns:contentStream&gt;&#xd;
         &lt;ns:versioningState&gt;NONE&lt;/ns:versioningState&gt;&#xd;
         &lt;ns:extension&gt;&#xd;
         &lt;/ns:extension&gt;&#xd;
      &lt;/ns:createDocument&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;&#xd;
--${rndBoundary}--</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${CMIS_URL}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">multipart/related; type=&quot;application/xop+xml&quot;; start=&quot;&lt;rootpart@soapui.org&gt;&quot;; start-info=&quot;text/xml&quot;; boundary=&quot;${rndBoundary}&quot;</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">MIME-Version</stringProp>
                    <stringProp name="Header.value">1.0</stringProp>
                  </elementProp>
                  <elementProp name="Cookie" elementType="Header">
                    <stringProp name="Header.name">Cookie</stringProp>
                    <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateFolderLocalStoreAmount" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">--${rndBoundary}&#xd;
Content-Type: application/xop+xml; charset=UTF-8; type=&quot;text/xml&quot;&#xd;
Content-Transfer-Encoding: 8bit&#xd;
Content-ID: &lt;rootpart@soapui.org&gt;&#xd;
&#xd;
&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ns=&quot;http://docs.oasis-open.org/ns/cmis/messaging/200908/&quot; xmlns:ns1=&quot;http://docs.oasis-open.org/ns/cmis/core/200908/&quot;&gt;&#xd;
&lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;ns:createFolder&gt;&#xd;
         &lt;ns:repositoryId&gt;${CONTENT_REPO}&lt;/ns:repositoryId&gt;&#xd;
         &lt;ns:properties&gt;&#xd;
            &lt;ns1:propertyId displayName=&quot;?&quot; localName=&quot;?&quot; propertyDefinitionId=&quot;cmis:objectTypeId&quot; queryName=&quot;?&quot;&gt;&#xd;
               &lt;ns1:value&gt;cmis:folder&lt;/ns1:value&gt;&#xd;
            &lt;/ns1:propertyId&gt;            &#xd;
            &lt;ns1:propertyString displayName=&quot;?&quot; localName=&quot;?&quot; propertyDefinitionId=&quot;cmis:name&quot; queryName=&quot;?&quot;&gt;&#xd;
               &lt;ns1:value&gt;folder_${rndFileName}_${counter}&lt;/ns1:value&gt;&#xd;
            &lt;/ns1:propertyString&gt;&#xd;
         &lt;/ns:properties&gt;&#xd;
         &lt;ns:folderId&gt;${__property(BASE_FOLDER_ID_LOCALSTORE)}&lt;/ns:folderId&gt;  &#xd;
         &lt;ns:extension&gt;&#xd;
         &lt;/ns:extension&gt;&#xd;
      &lt;/ns:createFolder&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;&#xd;
--${rndBoundary}--</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${CMIS_URL}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">multipart/related; type=&quot;application/xop+xml&quot;; start=&quot;&lt;rootpart@soapui.org&gt;&quot;; start-info=&quot;text/xml&quot;; boundary=&quot;${rndBoundary}&quot;</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">MIME-Version</stringProp>
                    <stringProp name="Header.value">1.0</stringProp>
                  </elementProp>
                  <elementProp name="Cookie" elementType="Header">
                    <stringProp name="Header.name">Cookie</stringProp>
                    <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Indexing_time_for_LocalStore" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1400496822000</longProp>
        <longProp name="ThreadGroup.end_time">1400496822000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Measurement of indexing time in LocalStore</stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${testIndexingTimeLocalStore_on}&quot; == &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="testIndexingTimeLocalStore" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="testIndexingTimeLocalStore" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(&quot;${indexStatusLocalStore}&quot; != &quot;DONE&quot;)}</stringProp>
              </WhileController>
              <hashTree>
                <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Before Check" enabled="false">
                  <boolProp name="displayJMeterProperties">true</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugSampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="testIndexingTimeLocalStore" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/content/rest/user-connector/</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Cookie" elementType="Header">
                        <stringProp name="Header.name">Cookie</stringProp>
                        <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parsing of &quot;indexStatusLocalStore&quot; from HTTP response" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">indexStatusLocalStore</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;localStore&apos;)].indexStatus</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save indexStatus to Variables" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">${__setProperty(indexStatusLocalStore,${indexStatusLocalStore})};</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parsing of &quot;lastIndexedTimeLocalStore&quot; from HTTP response" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">lastIndexedTimeLocalStore</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;localStore&apos;)].lastIndexedTime</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save lastIndexedTime to Variables" enabled="true">
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">${__setProperty(lastIndexedTimeLocalStore,${lastIndexedTimeLocalStore})};</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Delay" enabled="true">
                  <intProp name="ActionProcessor.action">1</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration">${POLLING_DELAY}</stringProp>
                </TestAction>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save Indexing Time to Variables" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">//${__setProperty(indexingTime,${lastIndexedTime})};  TESTSTART.MS
//String indexingTime = vars.put(&quot;indexingTime&quot;,${__P(lastIndexedTime)})

${__setProperty(indexingTime111,props.get(&quot;${__property(lastIndexedTimeLocalStore)}&quot;))};</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug After Check" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Indexing_time_for_Microsoft_Exchange_INBOX" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1400496822000</longProp>
        <longProp name="ThreadGroup.end_time">1400496822000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Measurement of indexing time in Microsoft Exchange: INBOX</stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${testIndexingTimeExchangeInbox_on}&quot; == &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Microsoft Exchange: INBOX connector" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[{&quot;projections&quot;:{&quot;/Exchange/Inbox&quot;:&quot;/Inbox&quot;},&quot;name&quot;:&quot;Exchange/Inbox&quot;,&quot;username&quot;:&quot;${EXCHANGE_USERNAME}&quot;,&quot;password&quot;:&quot;${EXCHANGE_PASSWORD}&quot;,&quot;userConnectorType&quot;:&quot;MS_EXCHANGE&quot;}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/content/rest/user-connector/finish-create/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok} &amp;&amp; &quot;${N}&quot; != 1</stringProp>
            <boolProp name="IfController.evaluateAll">true</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="testIndexingTimeExchange" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="testIndexingTimeExchange" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">1</stringProp>
              </LoopController>
              <hashTree>
                <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                  <stringProp name="WhileController.condition">${__javaScript(&quot;${indexStatusExchangeInbox}&quot; != &quot;DONE&quot;)}</stringProp>
                </WhileController>
                <hashTree>
                  <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Before Check" enabled="false">
                    <boolProp name="displayJMeterProperties">true</boolProp>
                    <boolProp name="displayJMeterVariables">true</boolProp>
                    <boolProp name="displaySystemProperties">false</boolProp>
                  </DebugSampler>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="testIndexingTimeExchange" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">/content/rest/user-connector/</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                        </elementProp>
                        <elementProp name="Cookie" elementType="Header">
                          <stringProp name="Header.name">Cookie</stringProp>
                          <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parsing of &quot;indexStatus&quot; from HTTP response" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">indexStatusExchangeInbox</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Exchange/Inbox&apos;)].indexStatus</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save indexStatus to Variables" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">${__setProperty(indexStatusExchangeInbox,${indexStatusExchangeInbox})};</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parsing of &quot;lastIndexedTime&quot; from HTTP response" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">lastIndexedTimeExchangeInbox</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Exchange/Inbox&apos;)].lastIndexedTime</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save lastIndexedTime to Variables" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">${__setProperty(lastIndexedTimeExchangeInbox,${lastIndexedTimeExchangeInbox})};</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Delay" enabled="true">
                    <intProp name="ActionProcessor.action">1</intProp>
                    <intProp name="ActionProcessor.target">0</intProp>
                    <stringProp name="ActionProcessor.duration">${POLLING_DELAY}</stringProp>
                  </TestAction>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save Indexing Time to Variables" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">//${__setProperty(indexingTime,${lastIndexedTime})};  TESTSTART.MS
//String indexingTime = vars.put(&quot;indexingTime&quot;,${__P(lastIndexedTime)})

${__setProperty(indexingTime111,props.get(&quot;${__property(lastIndexedTimeExchangeInbox)}&quot;))};</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug After Check" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Indexing_time_for_Microsoft_SharePoint" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1400496822000</longProp>
        <longProp name="ThreadGroup.end_time">1400496822000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Measurement of indexing time in Microsoft SharePoint</stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${testIndexingTimeSharePoint_on}&quot; == &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Microsoft SharePoint" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[{&quot;projections&quot;:{&quot;/SharePoint/AT&quot;:&quot;/&quot;},&quot;name&quot;:&quot;SharePoint/AT&quot;,&quot;username&quot;:&quot;${SHAREPOINT_USERNAME}&quot;,&quot;password&quot;:&quot;${SHAREPOINT_PASSWORD}&quot;,&quot;url&quot;:&quot;${SHAREPOINT_URL}&quot;,&quot;repositoryId&quot;:&quot;fb4abf44-3424-4900-9a85-4250ffc7a3d6&quot;,&quot;userConnectorType&quot;:&quot;SHAREPOINT&quot;}]&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
[{&quot;projections&quot;:{&quot;/SharePoint/AT&quot;:&quot;/&quot;},&quot;name&quot;:&quot;SharePoint/AT&quot;,&quot;username&quot;:&quot;content-test&quot;,&quot;password&quot;:&quot;content-test&quot;,&quot;url&quot;:&quot;http://content-sharepoint-dev.engagepoint.ua/_vti_bin/cmissoapwsdl.aspx&quot;,&quot;repositoryId&quot;:&quot;fb4abf44-3424-4900-9a85-4250ffc7a3d6&quot;,&quot;userConnectorType&quot;:&quot;SHAREPOINT&quot;}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/content/rest/user-connector/finish-create/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok} &amp;&amp; &quot;${N}&quot; != 1</stringProp>
            <boolProp name="IfController.evaluateAll">true</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="testIndexingTimeSharePoint" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="testIndexingTimeSharePoint" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">1</stringProp>
              </LoopController>
              <hashTree>
                <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                  <stringProp name="WhileController.condition">${__javaScript(&quot;${indexStatusSharePoint}&quot; != &quot;DONE&quot;)}</stringProp>
                </WhileController>
                <hashTree>
                  <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Before Check" enabled="false">
                    <boolProp name="displayJMeterProperties">true</boolProp>
                    <boolProp name="displayJMeterVariables">true</boolProp>
                    <boolProp name="displaySystemProperties">false</boolProp>
                  </DebugSampler>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="testIndexingTimeSharePoint" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">/content/rest/user-connector/</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                        </elementProp>
                        <elementProp name="Cookie" elementType="Header">
                          <stringProp name="Header.name">Cookie</stringProp>
                          <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parsing of &quot;indexStatus&quot; from HTTP response" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">indexStatusSharePoint</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;SharePoint/AT&apos;)].indexStatus</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save indexStatus to Variables" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">${__setProperty(indexStatusSharePoint,${indexStatusSharePoint})};</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parsing of &quot;lastIndexedTime&quot; from HTTP response" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">lastIndexedTimeSharePoint</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;SharePoint/AT&apos;)].lastIndexedTime</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save lastIndexedTime to Variables" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">${__setProperty(lastIndexedTimeSharePoint,${lastIndexedTimeSharePoint})};</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Delay" enabled="true">
                    <intProp name="ActionProcessor.action">1</intProp>
                    <intProp name="ActionProcessor.target">0</intProp>
                    <stringProp name="ActionProcessor.duration">${POLLING_DELAY}</stringProp>
                  </TestAction>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save Indexing Time to Variables" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">//${__setProperty(indexingTime,${lastIndexedTime})};  TESTSTART.MS
//String indexingTime = vars.put(&quot;indexingTime&quot;,${__P(lastIndexedTime)})

${__setProperty(indexingTime111,props.get(&quot;${__property(lastIndexedTimeSharePoint)}&quot;))};</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug After Check" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Indexing_time_for_Filenet" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1400496822000</longProp>
        <longProp name="ThreadGroup.end_time">1400496822000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Measurement of indexing time in Filenet</stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${testIndexingTimeFilenet_on}&quot; == &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add FileNet connector" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[{&quot;projections&quot;:{&quot;/FILENET/${FILENET_PROJ}&quot;:&quot;/&quot;},&quot;name&quot;:&quot;/FILENET/${FILENET_PROJ}&quot;,&quot;username&quot;:&quot;${FILENET_USERNAME}&quot;,&quot;password&quot;:&quot;${FILENET_PASSWORD}&quot;,&quot;url&quot;:&quot;${FILENET_URL}&quot;,&quot;repositoryId&quot;:&quot;${FILENET_PROJ}&quot;,&quot;userConnectorType&quot;:&quot;FILE_NET&quot;}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/content/rest/user-connector/finish-create/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok} &amp;&amp; &quot;${N}&quot; != 1</stringProp>
            <boolProp name="IfController.evaluateAll">true</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="testIndexingTimeFilenet" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="testIndexingTimeFilenet" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">1</stringProp>
              </LoopController>
              <hashTree>
                <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                  <stringProp name="WhileController.condition">${__javaScript(&quot;${indexStatusFilenet}&quot; != &quot;DONE&quot;)}</stringProp>
                </WhileController>
                <hashTree>
                  <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Before Check" enabled="false">
                    <boolProp name="displayJMeterProperties">true</boolProp>
                    <boolProp name="displayJMeterVariables">true</boolProp>
                    <boolProp name="displaySystemProperties">false</boolProp>
                  </DebugSampler>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="testIndexingTimeFilenet" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">/content/rest/user-connector/</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                        </elementProp>
                        <elementProp name="Cookie" elementType="Header">
                          <stringProp name="Header.name">Cookie</stringProp>
                          <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parsing of &quot;indexStatusFilenet&quot; from HTTP response" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">indexStatusFilenet</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;/FILENET/AT&apos;)].indexStatus</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save indexStatus to Variables" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">${__setProperty(indexStatusFilenet,${indexStatusFilenet})};</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parsing of &quot;lastIndexedTimeFilenet&quot; from HTTP response" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">lastIndexedTimeFilenet</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;/FILENET/AT&apos;)].lastIndexedTime</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save lastIndexedTime to Variables" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">${__setProperty(lastIndexedTimeFilenet,${lastIndexedTimeFilenet})};</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Delay" enabled="true">
                    <intProp name="ActionProcessor.action">1</intProp>
                    <intProp name="ActionProcessor.target">0</intProp>
                    <stringProp name="ActionProcessor.duration">${POLLING_DELAY}</stringProp>
                  </TestAction>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save Indexing Time to Variables" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">//${__setProperty(indexingTime,${lastIndexedTime})};  TESTSTART.MS
//String indexingTime = vars.put(&quot;indexingTime&quot;,${__P(lastIndexedTime)})

${__setProperty(indexingTime111,props.get(&quot;${__property(lastIndexedTimeFilenet)}&quot;))};</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug After Check" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Indexing_time_for_Gmail_INBOX" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1400496822000</longProp>
        <longProp name="ThreadGroup.end_time">1400496822000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Measurement of indexing time in Gmail: INBOX</stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${testIndexingTimeGmailInbox_on}&quot; == &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Gmail: INBOX" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[{&quot;projections&quot;:{&quot;/GMAIL&quot;:&quot;/GMAIL&quot;},&quot;labels&quot;:[&quot;INBOX&quot;],&quot;userConnectorType&quot;:&quot;GMAIL&quot;,&quot;name&quot;:&quot;GMAIL&quot;,&quot;password&quot;:&quot;${GMAIL_PASSWORD}&quot;,&quot;username&quot;:&quot;${GMAIL_USERNAME}&quot;}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/content/rest/user-connector/finish-create/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok} &amp;&amp; &quot;${N}&quot; != 1</stringProp>
            <boolProp name="IfController.evaluateAll">true</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="testIndexingTimeGmailInbox" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="testIndexingTimeGmailInbox" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">1</stringProp>
              </LoopController>
              <hashTree>
                <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                  <stringProp name="WhileController.condition">${__javaScript(&quot;${indexStatusGmailInbox}&quot; != &quot;DONE&quot;)}</stringProp>
                </WhileController>
                <hashTree>
                  <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Before Check" enabled="false">
                    <boolProp name="displayJMeterProperties">true</boolProp>
                    <boolProp name="displayJMeterVariables">true</boolProp>
                    <boolProp name="displaySystemProperties">false</boolProp>
                  </DebugSampler>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="testIndexingTimeGmailInbox" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">/content/rest/user-connector/</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                        </elementProp>
                        <elementProp name="Cookie" elementType="Header">
                          <stringProp name="Header.name">Cookie</stringProp>
                          <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parsing of &quot;indexStatus&quot; from HTTP response" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">indexStatusGmailInbox</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;GMAIL&apos;)].indexStatus</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save indexStatus to Variables" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">${__setProperty(indexStatusGmailInbox,${indexStatusGmailInbox})};</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parsing of &quot;lastIndexedTime&quot; from HTTP response" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">lastIndexedTimeGmailInbox</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;GMAIL/INBOX&apos;)].lastIndexedTime</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save lastIndexedTime to Variables" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">${__setProperty(lastIndexedTimeGmailInbox,${lastIndexedTimeGmailInbox})};</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Delay" enabled="true">
                    <intProp name="ActionProcessor.action">1</intProp>
                    <intProp name="ActionProcessor.target">0</intProp>
                    <stringProp name="ActionProcessor.duration">${POLLING_DELAY}</stringProp>
                  </TestAction>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save Indexing Time to Variables" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">//${__setProperty(indexingTime,${lastIndexedTime})};  TESTSTART.MS
//String indexingTime = vars.put(&quot;indexingTime&quot;,${__P(lastIndexedTime)})

${__setProperty(indexingTime111,props.get(&quot;${__property(lastIndexedTimeGmailInbox)}&quot;))};</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug After Check" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Indexing_time_for_FTP" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1400496822000</longProp>
        <longProp name="ThreadGroup.end_time">1400496822000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Measurement of indexing time in FTP</stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${testIndexingTimeFtp_on}&quot; == &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add FTP connector" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[{&quot;projections&quot;:{&quot;/FTP&quot;:&quot;&quot;},&quot;name&quot;:&quot;FTP/&quot;,&quot;username&quot;:&quot;${FTP_USERNAME}&quot;,&quot;password&quot;:&quot;${FTP_PASSWORD}&quot;,&quot;url&quot;:&quot;${FTP_URL}&quot;,&quot;port&quot;:21,&quot;userConnectorType&quot;:&quot;FILE_SERVER&quot;,&quot;protocol&quot;:&quot;ftp&quot;}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/content/rest/user-connector/finish-create/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok} &amp;&amp; &quot;${N}&quot; != 1</stringProp>
            <boolProp name="IfController.evaluateAll">true</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="testIndexingTimeFtp" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="testIndexingTimeFtp" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">1</stringProp>
              </LoopController>
              <hashTree>
                <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                  <stringProp name="WhileController.condition">${__javaScript(&quot;${indexStatusFtp}&quot; != &quot;DONE&quot;)}</stringProp>
                </WhileController>
                <hashTree>
                  <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Before Check" enabled="false">
                    <boolProp name="displayJMeterProperties">true</boolProp>
                    <boolProp name="displayJMeterVariables">true</boolProp>
                    <boolProp name="displaySystemProperties">false</boolProp>
                  </DebugSampler>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="testIndexingTimeFtp" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">/content/rest/user-connector/</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                        </elementProp>
                        <elementProp name="Cookie" elementType="Header">
                          <stringProp name="Header.name">Cookie</stringProp>
                          <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parsing of &quot;indexStatus&quot; from HTTP response" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">indexStatusFtp</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;FTP/&apos;)].indexStatus</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save indexStatus to Variables" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">${__setProperty(indexStatusFtp,${indexStatusFtp})};</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parsing of &quot;lastIndexedTime&quot; from HTTP response" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">lastIndexedTimeFtp</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;FTP/&apos;)].lastIndexedTime</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save lastIndexedTime to Variables" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">${__setProperty(lastIndexedTimeFtp,${lastIndexedTimeFtp})};</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Delay" enabled="true">
                    <intProp name="ActionProcessor.action">1</intProp>
                    <intProp name="ActionProcessor.target">0</intProp>
                    <stringProp name="ActionProcessor.duration">${POLLING_DELAY}</stringProp>
                  </TestAction>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save Indexing Time to Variables" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">//${__setProperty(indexingTime,${lastIndexedTime})};  TESTSTART.MS
//String indexingTime = vars.put(&quot;indexingTime&quot;,${__P(lastIndexedTime)})

${__setProperty(indexingTime111,props.get(&quot;${__property(lastIndexedTimeFtp)}&quot;))};</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug After Check" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Indexing_time_for_FTPs" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1400496822000</longProp>
        <longProp name="ThreadGroup.end_time">1400496822000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Measurement of indexing time in FTPs</stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${testIndexingTimeFtps_on}&quot; == &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add FTPs connector" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[{&quot;projections&quot;:{&quot;/FTPS&quot;:&quot;&quot;},&quot;name&quot;:&quot;FTPS/&quot;,&quot;username&quot;:&quot;${FTP_USERNAME}&quot;,&quot;password&quot;:&quot;${FTP_PASSWORD}&quot;,&quot;url&quot;:&quot;${FTPS_URL}&quot;,&quot;port&quot;:21,&quot;userConnectorType&quot;:&quot;FILE_SERVER&quot;,&quot;protocol&quot;:&quot;ftps&quot;}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/content/rest/user-connector/finish-create/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok} &amp;&amp; &quot;${N}&quot; != 1</stringProp>
            <boolProp name="IfController.evaluateAll">true</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="testIndexingTimeFtps" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="testIndexingTimeFtps" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">1</stringProp>
              </LoopController>
              <hashTree>
                <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                  <stringProp name="WhileController.condition">${__javaScript(&quot;${indexStatusFtps}&quot; != &quot;DONE&quot;)}</stringProp>
                </WhileController>
                <hashTree>
                  <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Before Check" enabled="false">
                    <boolProp name="displayJMeterProperties">true</boolProp>
                    <boolProp name="displayJMeterVariables">true</boolProp>
                    <boolProp name="displaySystemProperties">false</boolProp>
                  </DebugSampler>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="testIndexingTimeFtps" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">/content/rest/user-connector/</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                        </elementProp>
                        <elementProp name="Cookie" elementType="Header">
                          <stringProp name="Header.name">Cookie</stringProp>
                          <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parsing of &quot;indexStatus&quot; from HTTP response" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">indexStatusFtps</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;FTPS/&apos;)].indexStatus</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save indexStatus to Variables" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">${__setProperty(indexStatusFtps,${indexStatusFtps})};</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parsing of &quot;lastIndexedTime&quot; from HTTP response" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">lastIndexedTimeFtps</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;FTPS/&apos;)].lastIndexedTime</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save lastIndexedTime to Variables" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">${__setProperty(lastIndexedTimeFtps,${lastIndexedTimeFtps})};</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Delay" enabled="true">
                    <intProp name="ActionProcessor.action">1</intProp>
                    <intProp name="ActionProcessor.target">0</intProp>
                    <stringProp name="ActionProcessor.duration">${POLLING_DELAY}</stringProp>
                  </TestAction>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save Indexing Time to Variables" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">//${__setProperty(indexingTime,${lastIndexedTime})};  TESTSTART.MS
//String indexingTime = vars.put(&quot;indexingTime&quot;,${__P(lastIndexedTime)})

${__setProperty(indexingTime111,props.get(&quot;${__property(lastIndexedTimeFtps)}&quot;))};</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug After Check" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Indexing_time_for_SFTP" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1400496822000</longProp>
        <longProp name="ThreadGroup.end_time">1400496822000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Measurement of indexing time in SFTP</stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${testIndexingTimeSftp_on}&quot; == &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add SFTP connector" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[{&quot;projections&quot;:{&quot;/SFTP&quot;:&quot;&quot;},&quot;name&quot;:&quot;SFTP/&quot;,&quot;username&quot;:&quot;${FTP_USERNAME}&quot;,&quot;password&quot;:&quot;${FTP_PASSWORD}&quot;,&quot;url&quot;:&quot;${SFTP_URL}&quot;,&quot;port&quot;:22,&quot;userConnectorType&quot;:&quot;FILE_SERVER&quot;,&quot;protocol&quot;:&quot;sftp&quot;}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/content/rest/user-connector/finish-create/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok} &amp;&amp; &quot;${N}&quot; != 1</stringProp>
            <boolProp name="IfController.evaluateAll">true</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="testIndexingTimeSftp" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="testIndexingTimeSftp" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">1</stringProp>
              </LoopController>
              <hashTree>
                <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                  <stringProp name="WhileController.condition">${__javaScript(&quot;${indexStatusSftp}&quot; != &quot;DONE&quot;)}</stringProp>
                </WhileController>
                <hashTree>
                  <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Before Check" enabled="false">
                    <boolProp name="displayJMeterProperties">true</boolProp>
                    <boolProp name="displayJMeterVariables">true</boolProp>
                    <boolProp name="displaySystemProperties">false</boolProp>
                  </DebugSampler>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="testIndexingTimeSftp" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">/content/rest/user-connector/</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                        </elementProp>
                        <elementProp name="Cookie" elementType="Header">
                          <stringProp name="Header.name">Cookie</stringProp>
                          <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parsing of &quot;indexStatus&quot; from HTTP response" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">indexStatusSftp</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;SFTP/&apos;)].indexStatus</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save indexStatus to Variables" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">${__setProperty(indexStatusSftp,${indexStatusSftp})};</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parsing of &quot;lastIndexedTime&quot; from HTTP response" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">lastIndexedTimeSftp</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;SFTP/&apos;)].lastIndexedTime</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save lastIndexedTime to Variables" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">${__setProperty(lastIndexedTimeSftp,${lastIndexedTimeSftp})};</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Delay" enabled="true">
                    <intProp name="ActionProcessor.action">1</intProp>
                    <intProp name="ActionProcessor.target">0</intProp>
                    <stringProp name="ActionProcessor.duration">${POLLING_DELAY}</stringProp>
                  </TestAction>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save Indexing Time to Variables" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">//${__setProperty(indexingTime,${lastIndexedTime})};  TESTSTART.MS
//String indexingTime = vars.put(&quot;indexingTime&quot;,${__P(lastIndexedTime)})

${__setProperty(indexingTime111,props.get(&quot;${__property(lastIndexedTimeSftp)}&quot;))};</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug After Check" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Indexing_time_for_SMB" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1400496822000</longProp>
        <longProp name="ThreadGroup.end_time">1400496822000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Measurement of indexing time in SMB</stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">&quot;${testIndexingTimeSmb_on}&quot; == &quot;true&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add SMB connector" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[{&quot;projections&quot;:{&quot;/SMB/ContentSharedFolder&quot;:&quot;/ContentSharedFolder&quot;},&quot;name&quot;:&quot;SMB/ContentSharedFolder&quot;,&quot;username&quot;:&quot;${FTP_USERNAME}&quot;,&quot;password&quot;:&quot;${FTP_PASSWORD}&quot;,&quot;url&quot;:&quot;${SMB_URL}&quot;,&quot;port&quot;:&quot;445&quot;,&quot;userConnectorType&quot;:&quot;FILE_SERVER&quot;,&quot;protocol&quot;:&quot;smb&quot;}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/content/rest/user-connector/finish-create/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok} &amp;&amp; &quot;${N}&quot; != 1</stringProp>
            <boolProp name="IfController.evaluateAll">true</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="testIndexingTimeSmb" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="testIndexingTimeSmb" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">1</stringProp>
              </LoopController>
              <hashTree>
                <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                  <stringProp name="WhileController.condition">${__javaScript(&quot;${indexStatusSmb}&quot; != &quot;DONE&quot;)}</stringProp>
                </WhileController>
                <hashTree>
                  <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Before Check" enabled="false">
                    <boolProp name="displayJMeterProperties">true</boolProp>
                    <boolProp name="displayJMeterVariables">true</boolProp>
                    <boolProp name="displaySystemProperties">false</boolProp>
                  </DebugSampler>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="testIndexingTimeSmb" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">/content/rest/user-connector/</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                        </elementProp>
                        <elementProp name="Cookie" elementType="Header">
                          <stringProp name="Header.name">Cookie</stringProp>
                          <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parsing of &quot;indexStatus&quot; from HTTP response" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">indexStatusSmb</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;SMB/ContentSharedFolder&apos;)].indexStatus</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save indexStatus to Variables" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">${__setProperty(indexStatusSmb,${indexStatusSmb})};</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parsing of &quot;lastIndexedTime&quot; from HTTP response" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">lastIndexedTimeSmb</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;SMB/ContentSharedFolder&apos;)].lastIndexedTime</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">0</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save lastIndexedTimeSmb to Variables" enabled="true">
                      <boolProp name="resetInterpreter">false</boolProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="script">String _lastIndexedTimeSmb = vars.get(&quot;lastIndexedTimeSmb&quot;);
if (!_lastIndexedTimeSmb.equals(&quot;0&quot;) &amp;&amp; !_lastIndexedTimeSmb.equals(&quot;${lastIndexedTimeSmb}&quot;))
{ 
	_indexingTimeSmb=${__jexl2((${lastIndexedTimeSmb}-${TESTSTART.MS})/1000)};
	${__setProperty(indexingTimeSmb,${indexingTimeSmb})};
	log.info(&quot;lastIndexedTimeSmb = &quot; + _lastIndexedTimeSmb);
	log.info(&quot;indexingTimeSmb = &quot; + _indexingTimeSmb + &quot; seconds&quot;);
}</stringProp>
                    </BeanShellPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Delay" enabled="true">
                    <intProp name="ActionProcessor.action">1</intProp>
                    <intProp name="ActionProcessor.target">0</intProp>
                    <stringProp name="ActionProcessor.duration">${POLLING_DELAY}</stringProp>
                  </TestAction>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug After Check" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Postconditions_Delete_all_repositories" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1499165105000</longProp>
        <longProp name="ThreadGroup.end_time">1499165105000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${JMeterThread.last_sample_ok} &amp;&amp; &quot;${N}&quot; != 1</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check id repositories" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/content/rest/user-connector/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parsing of &quot;id repository LocalStore&quot; from HTTP response" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">idLocalStore</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;localStore&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parsing of &quot;id repository ExchangeInbox&quot; from HTTP response" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">idExchangeInbox</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Exchange/Inbox&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parsing of &quot;id repository SharePoint&quot; from HTTP response" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">idSharePoint</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;SharePoint/AT&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parsing of &quot;id repository Filenet&quot; from HTTP response" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">idFilenet</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;/FILENET/AT&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parsing of &quot;id repository GmailInbox&quot; from HTTP response" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">idGmailInbox</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;GMAIL&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parsing of &quot;id repository Ftp&quot; from HTTP response" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">idFtp</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;FTP/&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parsing of &quot;id repository Ftps&quot; from HTTP response" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">idFtps</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;FTPS/&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parsing of &quot;id repository Sftp&quot; from HTTP response" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">idSftp</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;SFTP/&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Parsing of &quot;id repository Smb&quot; from HTTP response" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">idSmb</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;SMB/ContentSharedFolder&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">null</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Save id repository to Variables" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">${__setProperty(idGmailInbox,${idGmailInbox})};</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller ExchangeInbox" enabled="true">
            <stringProp name="IfController.condition">&quot;${testIndexingTimeExchangeInbox_on}&quot; == &quot;true&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete repository ExchangeInbox" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/content/rest/user-connector/?id=${idExchangeInbox}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Cookie" elementType="Header">
                    <stringProp name="Header.name">Cookie</stringProp>
                    <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller SharePoint" enabled="true">
            <stringProp name="IfController.condition">&quot;${testIndexingTimeSharePoint_on}&quot; == &quot;true&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete repository SharePoint" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/content/rest/user-connector/?id=${idSharePoint}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Cookie" elementType="Header">
                    <stringProp name="Header.name">Cookie</stringProp>
                    <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Filenet" enabled="true">
            <stringProp name="IfController.condition">&quot;${testIndexingTimeFilenet_on}&quot; == &quot;true&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete repository Filenet" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/content/rest/user-connector/?id=${idFilenet}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Cookie" elementType="Header">
                    <stringProp name="Header.name">Cookie</stringProp>
                    <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller GmailInbox" enabled="true">
            <stringProp name="IfController.condition">&quot;${testIndexingTimeGmailInbox_on}&quot; == &quot;true&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete repository GmailInbox" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/content/rest/user-connector/?id=${idGmailInbox}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Cookie" elementType="Header">
                    <stringProp name="Header.name">Cookie</stringProp>
                    <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Ftp" enabled="true">
            <stringProp name="IfController.condition">&quot;${testIndexingTimeFtp_on}&quot; == &quot;true&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete repository Ftp" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/content/rest/user-connector/?id=${idFtp}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Cookie" elementType="Header">
                    <stringProp name="Header.name">Cookie</stringProp>
                    <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Ftps" enabled="true">
            <stringProp name="IfController.condition">&quot;${testIndexingTimeFtps_on}&quot; == &quot;true&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete repository Ftps" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/content/rest/user-connector/?id=${idFtps}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Cookie" elementType="Header">
                    <stringProp name="Header.name">Cookie</stringProp>
                    <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Sftp" enabled="true">
            <stringProp name="IfController.condition">&quot;${testIndexingTimeSftp_on}&quot; == &quot;true&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete repository Sftp" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/content/rest/user-connector/?id=${idSftp}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Cookie" elementType="Header">
                    <stringProp name="Header.name">Cookie</stringProp>
                    <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller Smb" enabled="true">
            <stringProp name="IfController.condition">&quot;${testIndexingTimeSmb_on}&quot; == &quot;true&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">true</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete repository Smb" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${HOST}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/content/rest/user-connector/?id=${idSmb}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Cookie" elementType="Header">
                    <stringProp name="Header.name">Cookie</stringProp>
                    <stringProp name="Header.value">${__property(setCookie)}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler Final" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
        <stringProp name="ConstantTimer.delay">300</stringProp>
        <stringProp name="RandomTimer.range">100.0</stringProp>
      </GaussianRandomTimer>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>false</time>
            <latency>false</latency>
            <timestamp>true</timestamp>
            <success>false</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <url>true</url>
            <fileName>true</fileName>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <objProp>
          <name></name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename">jMeterTestReport.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <objProp>
          <name></name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <objProp>
          <name></name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <objProp>
          <name></name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename">jMeterSummaryReport.csv</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="false">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree>
      <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="HTTP(S) Traffic Recorder" enabled="false">
        <stringProp name="ProxyControlGui.port">8089</stringProp>
        <collectionProp name="ProxyControlGui.exclude_list"/>
        <collectionProp name="ProxyControlGui.include_list"/>
        <boolProp name="ProxyControlGui.capture_http_headers">true</boolProp>
        <intProp name="ProxyControlGui.grouping_mode">0</intProp>
        <boolProp name="ProxyControlGui.add_assertion">false</boolProp>
        <stringProp name="ProxyControlGui.sampler_type_name"></stringProp>
        <boolProp name="ProxyControlGui.sampler_redirect_automatically">false</boolProp>
        <boolProp name="ProxyControlGui.sampler_follow_redirects">true</boolProp>
        <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
        <boolProp name="ProxyControlGui.sampler_download_images">false</boolProp>
        <stringProp name="ProxyControlGui.proxy_prefix_http_sampler_name"></stringProp>
        <boolProp name="ProxyControlGui.notify_child_sl_filtered">true</boolProp>
        <boolProp name="ProxyControlGui.regex_match">false</boolProp>
        <stringProp name="ProxyControlGui.content_type_include"></stringProp>
        <stringProp name="ProxyControlGui.content_type_exclude"></stringProp>
      </ProxyControl>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
